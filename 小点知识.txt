1.var a = 1：
在函数中等价于在函数开头var a ;再在该语句处赋值a = 1;（形如var b = function(){}的叫函数表达式，类似于function b()叫函数声明，函数声明会被提升(Hoist)到所处作用域的顶端）。

2.git库同步后网页形式打开index.html：
要么远程库命名github.io结尾，要么用分支“gh-pages”提交（可能要么就用TortoiseGit）。

3.git远程本地库同步：
有了git并git config --global user.name和user.email之后，注册Github或Coding.net后获取远程库的链接，在本地库上一级位置打开Git bash，输入“git clone”+远程库链接，添加文件到本地库后“git add”+文件名.后缀（“git add .”省打文件名了）,“git commit -m '添加描述'”,“git push”即可（git add .先添加   git commit -m ""再提交     git push最后推送）。

4.git需要的常用命令：
git add 添加
git commit -m ''提交
git push 推送（第一次设置git push origin(远程库名) master(本地分支名)）
git pull 拉取
git status 查看当前修改状态
git remote add origin(远程库名) https://···(远程库地址) 本地添加远程库联系
git remote rm origin(远程库名) 删除远程库联系
git branch 查看分支
git branch xxx 新建xxx分支
git checkout xxx 切换xxx分支
git merge xxx 合并xxx分支
git branch -d xxx 删除本地xxx分支
git push origin(远程库名) --delete xxx 删除远程xxx分支。
ESC :q! Enter 依次键入退出Vim

5.html转义字符：
常用转义字符：空格→&nbsp; <→&lt; >→&gt; &→&amp; ©→&copy。
补充js转义字符：\+符号 空格→\0; 换行→\n。

6.常用元数据（<meta>）：
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="shortcut icon" href="favicon.ico" type="image/x-icon">。


7.a的些属性：
download下载属性
href属性还可以发邮件，如href='mailto:xxxx@qq.com',还可以打电话，如href='tel:+123456'，
还可以打开指定QQ对话框，如href='tencent://message/?uin=xxxxxxxxx'。

8.table的colgroup：
对表格中的列格式化管理，感觉写不写都无所谓···(border-collapse和border-spacing都要写在css table{}里有效)

9.form里的一些小东西：
hidden属性，html全局属性，哪个元素标签里都能写，不止form里
<button type='reset'>重置当前表单按钮最简单的写法，无需脚本
required属性用于必填项
maxlength,minlength文本框的输入限制
<input type='hidden'>前后端交流校验用
name属性在提交的时候用，否则服务器无法获取指定数据
<form oninput='x.value=parseInt(a.value)+parseInt(b.value)'>  <output name='x' for='a b'></output> 其中a,b是另外的input的id值，做简单数据计算和逻辑判断（感觉也没卵用）

10.box-sizing属性：
该属性是对盒模型的标准进行设置，可以在css的 *{}里标准初始化，如box-sizing: border-box。

11.css的一些长度单位：
rem，在html{}里设置，如html{font-size: 10px;/*font-size: 62.5%;*/}，此时1rem = 10px
vw,vh是视口宽高百分比单位，1vw = 1%视口宽度，1vh = 1%视口高度。

12.css的优先级规则（Specificity 特异性）：
元素、伪元素 —— +1
类、伪类、属性 —— +10
ID —— + 100
style —— +1000。

13.负margin：
合理利用负margin可以解决一些定位问题，比如父元素中若干子元素浮动加一点margin-right之后
在最后一个子元素的右边有间隙（他们的margin-right），可以给父元素负margin，再加个
overflow: hidden;解决，达到像flex的space-between效果。

14.details标签：
<details>
<summary>标题或者题目概要</summary>
···内容···巴拉巴拉巴拉···
</details>

15.inline-block默认间距取消方法：
在inline-block元素们的父元素中加“font-size: 0;”即可，要么就在html结构中更改html结构。

16.font-awesome：
记得http://staticfile.org/或者https://cdn.bootcss.com/这两个网站就行了，把链接link进来就能直接用了。

17.text-decoration: underline wavy red；一个有趣的小效果：
如上写法会出现红色波浪下划线，但目前浏览器兼容性很差，顺便提一下font-variant属性，它的
small-caps属性值可以让字母变小型的大写。

18.text-indent：
这个文本首行缩进属性，除了一般的2rem首行缩进2字符之外，还可以设置为-9999px，这是
通过首行缩进把文字做成消失效果，主要针对用户。

19.text-overflow：
容器固定宽度之后，该属性的clip（修剪）值将剪掉超出文本部分，该属性的ellipsis（省略）值
将以省略号···形式表示多余文本（该效果需要容器是块元素且要加overflow:hidden）。

20.white-space：
文本换行属性，normal,pre,nowrap,pre-wrap,pre-line等值。

21.sticky：
粘性定位，平时文档流正常位置，内容下拉到设置位置会相当于fixed留在viewport指定位置，兼容性暂时不很好，知道就好。

22.img base64：
一种小图片转代码的编码方法，写在css里除了增加点代码体积，挺好。

23.原生js为元素添加删除class的方法：
classList属性，只读属性，但可以通过add()和remove()修改属性值，obj.classList.add('class1',
'class2'),或者obj.classList.remove('class1','class2'),toggle('class1')可以实现添加/删除的切换,还有contains('class1')（判断是否有指定类，布尔值）,item(index)（索引值返回对应类名）。

24.不定宽高元素水平垂直居中方法：
flex;
table-cell; 
translate + margin; 
(absolute/fixed)+left:0;right:0;top:0;bottom:0;margin:auto。

25.css3动画3D实现关键属性：
perspective，视距，写在舞台里（也可以写在容器里，和transform其他属性放一起，但为了整体效果一般还是写在舞台里），如perspective(800px)
perspective-origin，视角，写在舞台里
transform-style: preserve-3d，变化方式，写在容器里
transform-origin，变化原点，写在容器里(如果不写就默认是形成空间后该空间的中心点)，
如transform-origin: 0 0 0（这个000原点指的是形成空间前的2d容器的原点）;
backface-visibility,背面可见性，写在每个部分里，如backface-visibility: hidden;
transform: translateZ()，垂直元素面方向位移，和perspective配合使用(由于translateZ是处理
元素垂直面方向位移，所以它和rotateX(),rotateY()使用的先后顺序很重要，顺序不一样，位置也
不一样)。

26.css3通过hover实现3d小效果的注意点：
:hover的对象要是舞台，不要hover容器，通过“舞台:hvoer 容器”来控制容器效果，否则容易小问题。

27.fixed定位注意点：
不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置，fixed 属性会创建新的层叠上下文。当元素祖先的 transform  属性非 none 时，容器由视口改为该祖先。

28.js对一些浏览器或文档宽高数据的获取：
innerHeight 获取viewport宽高（小于等于浏览器总宽高）
document.documentElement.clientHeight 获取文档可见宽高（去掉滚动条）
window.screen.availHeight 获取屏幕像素可见宽高（去掉任务栏）,即浏览器总宽高
document.documentElement.scrollHeight 获取html的整体宽高
document.body.scrollTop 获取滚动条滚动高度，即距当前页面离顶部高度。 

29.transition中的scale()填负数：
会发生很好玩的效果，相反放大，元素完全x,y翻转显示。

30.data-*：
标准化下的自定义属性。  

31.css3filter（滤镜）：
滤镜效果，blur(px),brightness(%),contrast(%),drop-shadow(h v blur spread color),
grayscale(%),opacity(%)等值，opacity(%)和opacity属性差不多，grayscale(%)可以修改元素
的灰度，兼容性目前以加各种前缀为主。

32.text-align-last：
除了left,right,center值之外，设置justify可以两端对齐。

33.伪元素attr：
元素的html中写入data-*属性（比如<span data-tips='abc'></span>），再在该元素的伪元素的
content属性中用attr调用之前的data-*属性可以获取该属性值
（比如span::before{content:attr(data-tips)}），其伪元素的内容就是例子中的'abc'，这个效果
可以用在hover效果上，还可以制作半边色文字及相关特效，很好玩的。 


34.http://staticfile.org/和https://cdn.bootcss.com/和https://www.sassmeister.com/。

35.选择器 > * {}：
指该选择器下的所有后代元素。

36.形如.a.b的选择器（中间没有空格）：
指的是同时有a类和b类的元素选择器。

37.IE的兼容判断：
<!--[if lt lte gt gte IE 8]><![endif]-->对IE8前后的兼容判断（多个类写法判断的时候，最后一个
if前面的'--'要去掉）
除了lt gt之外还有()子表达式，&和|和!的逻辑与或非


38.IIFE (function(){})()：
Immediately-Invoked Function Expression，立即执行函数，有其独立的作用域。

39.script async属性,defer属性

40.反引号`：
js字符串除了'和"还可以用反引号`包裹，用`包裹的字符串里面可以添加任意的'，"等符号，还可以直接保留换行，最牛B可以用${}内嵌表达式，比如`1+1=${1+1}`输出的字符串就是`1+1=2`。

41.nodejs：
node -v 查看node版本
npm -v 查看npm版本
node 进入node.js交互环境，可以执行js语句
.exit 退出node.js交互环境，Ctrl+D 也可以，Ctrl+C两次也可以
.help 查看nodejs交互环境帮助
node-sass -wro css sass 为sass文件夹添加事件监听（文件夹名随便写，一致就行），在css目录下生成指定css文件，即编译

42.命令行：
explorer . 通过资源管理器打开当前目录
md(mkdir也行~) xxx 新建xxx文件夹
rmdir xxx 删除xxx文件夹
exit 退出命令编辑器
cd /  cd.  cd.. 进入根目录 进入当前目录 进入上一级目录

43.SASS：
变量：$xxx: yyy; 变量$xxx声明之后可以作用域内多处使用（感觉和js里变量差不多~，要全局使用在后面加 !global ,变量的值可以是数字，字符串，布尔值，列表，直接字符）
父元素替代选择器：&; &符号在sass被提供用于代替父选择器
导入子模块：@import： 把子模块导入到某个sass文件，再整体编译成一个css文件（子模块命名以 _ 开头）
插值：#{}： 结合 #{} 插值语法和变量可输出特定的属性名和选择器
混入：@mixin： 定义一个属性集，几个属性和值凑成的一个块，通过@include调用（其中参数问题等细节忘记了还得详看https://github.com/fe13/fe/blob/master/CSS/Sass/04.混入 Mixin.md）
参数：$xxx 、$xxx:$yyy 、$xxx...;  变量做参数，变量默认值为另一个变量，可变不定参数
@content： 我觉得最好还是把官网的例子拿下里看一下，方便理解和记忆（
			$color: white;
			@mixin colors($color: blue) {
  			  background-color: $color;
 			  @content;
  			  border-color: $color;
			}
			.colors {
 			   @include colors { color: $color; }
			}
		编译后：
			.colors {
  			  background-color: blue;
 			  color: white;
 			 c border-color: blue;
			}
）
扩展：@extend; 完美实现@mixin和@include的大概功能，生成形如 A, B 的选择器，比如
（.a{...} .b{@extend .a} .c{@extend .a} 生成.a,.b,.c{...}） 
占位符选择器：%xxx; 感觉就是@extend功能里面的匿名块
函数：@function ; @function用于定义函数，@return返回值
控制指令：@if, @for, @each ; 什么乱七八糟的

44.js快速类型转换：
数字转字符串：123 + '';
字符串转数字：+'abc';
其他转布尔： !!123   !!'abc';

45.参数列表arguments：
arguments对象可以无需明确参数名即可访问，类似数组(不是数组)的访问方式（
如：arguments[0]指第一个参数，arguments[1]指第二个）。

46.return：
return 后面要紧跟返回的结果，不能加换行。

47.let & const：
let 和 const声明的变量最小可见作用域搜是块级作用域，如{}
同一块级作用域下let不可重复声明变量，const用于声明常量，不可改。
【小笔记： for(let i =1;i < a.length;i++){a[i]怎么怎么样}   由于let在for里的特殊性，
其等价于  for(var i =1;i < a.length;i++){(function(k){a[k]怎么怎么样})(i)}
类似特殊还有箭头函数
let aaa = {
  bbb(song, time) {
    setTimeout(() => this.ccc(song), time * 1000);
  }
  ccc(){巴拉巴拉}
}
由于箭头函数的特殊性，其等价于
let aaa = {
  var it = this;
  bbb(song, time) {
    setTimeout(function() {
      it.ccc(song);
    }, time * 1000);
  }
  ccc(){巴拉巴拉}
}
我特么也不知道这些特殊性到底为什么
现在知道了：普通function函数和箭头函数的行为有一个微妙的区别，箭头函数没有它自己的this值，箭头函数内的this值继承自外围作用域。箭头函数与非箭头函数间还有一个细微的区别，箭头函数不会获取它们自己的arguments对象
】

48.临时死区：
let 作用域内，不管let先声明与否，以let声明的变量为首选，如果let后声明，则会因首选该变量但其未赋值而报错 is not defined。

49.顶层对象：
window是浏览器的顶层对象,node.js的顶层对象是global。

50.语句只有在执行的时候才会开始动态解析变量值（这就是为什么for+var添加事件错误的原因）。

51.js获取css样式的方法：
getComputedStyle，getPropertyValue，style(只操行内)，currentstyle（该死的IE）。

52.getBoundingClientRect()：
这个方法返回一个矩形对象，包含left、top等4个属性（相对于viewport）
var box=document.getElementById('box');         // 获取元素
alert(box.getBoundingClientRect().top);         // 元素上边距离页面上边的距离
alert(box.getBoundingClientRect().right);       // 元素右边距离页面左边的距离
alert(box.getBoundingClientRect().bottom);      // 元素下边距离页面上边的距离
alert(box.getBoundingClientRect().left);        // 元素左边距离页面左边的距离

53.对象：
对象的‘=’关联是引用，不是复制（所以修改的话会直接影响到引用的对象）；用const声明的对象可以被修改；用delete可以删除对象的属性或方法；用in可以判断对象是否具有某个属性或方法（如：'xxx' in yyy）；
当 == 或 === 作用于对象的时候，实际是在问：这两个变量引用的是用一个对象吗。

54.原型：
__proto__属性（如果自定义同样方法会覆盖原有原型属性方法，不推荐）和其原型链中构造函数的prototye属性指向一致,其中有很多原生方法，对象调用方法的时候会先在自身找方法，找不到再到_proto_里面找
Object.prototype属性是对象的原型，即：xxx.__proto__ === Object.prototype
var a = Object.create(b) 方法允许使用指定的b对象为原型创建一个新对象a（
注意：通过该方法创建的ab关系为b是a的原型，如果通过new直接创建新对象a，比如a = new b();则
b.prototype属性为a对象的原型）
Object.prototype.hasOwnProperty() 方法用于判定某个指定的属性是否对象的自身(非继承)属性（
如：a.hasOwnProperty(b) 判断b属性是否为a对象的自身属性）
Object.getOwnPropertyNames(obj) 该方法返回一个由指定对象的所有自身属性的属性名组成的数组
instanceof 该运算符用于判断对象原型链中是否有指定函数的prototype属性，其实就是看前是否是后的实例对象（如：a instanceof b 为真即 a.__proto__ === b.prototype 也就是a = new b()来的）
a.isPrototypeOf(b) 该方法用于判断a对象是否为b对象的原型（原型链中存在就算）
Object.getPrototypeOf(a) 该方法用于返回a对象的原型
Object.keys(a) 该方法返回a对象的所有属性名（自身属性，不包括继承属性）的数组
for···in  遍历指定对象的所有属性（包括一级继承来的属性），只遍历对象，不用在数组（
如：for (var a in b){} a指b对象的属性名）
for ···of  遍历指定对象的属性值，可以遍历数组（
如：for (var a of b）{} a指b对象或数组的属性值或元素值）
constructor 该属性用于返回指定对象的构造器，即构造函数（
如：var a = new b();则 a.constructor 返回 b）

55.img元素src属性路径正确的话不能正确显示伪元素（我也是日了狗了）。

56.箭头函数：
ES6  （如：var square = x => x * x; square(3)输出结果9）。

57.参数默认值：
ES6   （如：function(a,b=a,c=1){}默认参数b的值等于a,参数c的值等于1）。

58.forEach循环：
arr.forEach(function(item,index,arr){});

59.eval函数：
eval(string)函数计算指定字符串并执行其中js代码。

60.构造器Constructor：
构造器即构造函数就是类，一般首字母大写（普通函数驼峰式），例如function Aaaa(){}，
Aaaa.method = function(){} 就是静态方法，只能Aaaa类自己调用
Aaaa.prototype.method2 = function(){} 就是实例方法，可以给实例化之后的例子用
var aa = new Aaaa(); 就是实例化

61.键盘事件的Esc键，要用keydown或keyup触发，keypress无效（特么的）。

62.浏览器开发工具里选中元素后，$0可以获取当前选中元素。

63.getElementsByTagName()是动态获取集合，querySeletorAll()是静态获取。

64.JS_this：
this在全局或非严格模式的直接调用函数里的值是window;
this在严格模式的直接调用函数里的值是undefined;

65.obj.handleEvent(event)：
有了handleEvent(event)方法的obj对象可以作为addEventListener()的第二个参数即事件监听器，
handleEvent(event)中的this指向obj。 

66.event：
event.button  0，1，2分别代表鼠标左中右键
event.type   mousedown mouseup click keyup keydown keypress scroll等那些 
event.clientX(Y)   鼠标当前坐标（相对于viewport）
event.screenX(Y)   鼠标当前坐标（相对于浏览器）
event.pageX(Y)   鼠标当前坐标（相对于document文档）
event.offsetX(Y)   鼠标当前坐标（相对于当前元素）
event.key     键盘按键的名称
event.keyCode    键盘按键的unicode
event.target    触发元素
event.currentTarget    监听元素
event.preventDefault()   阻止浏览器默认行为，比如a链接，提交按钮等
（自定义事件：使用 CustomEvent 构造自定义事件，并可通过 detail 属性传递自定义数据。）
   

67.DOMContentLoaded事件：
DOM树构建完成事件，该事件在 document 上触发，因此要在 document 上监听此事件。

68.JSON：
JSON全称 JavaScript Object Notation(标记法)，将结构化数据表现为Js对象的数据交换格式
JSON是一种数据交换格式，所以属性名必须双引号标记且其对象中不能包含方法，禁止尾随逗号
json.parse()     把json字符串解析成js对象
json.stringify()      把js对象封装成json字符串用以存储或发送

69.Element.matches() 判断element是否匹配给定的选择器，比如元素a有类aaa的话，则
a.matches('.aaa') === true，所以event.target.matches()可用来匹配事件触发元素。

70.图片懒加载：
当图片好多的时候，把真实地址保存在比如data-src里，src里统一虚拟地址，在js里需要加载的时候才去用真实地址来显示出来。

71.js中dom自动获取焦点方法即eleMent.focus()，失去焦点就blur()，click()还可以模拟点击。

72.setTimeout()和setInterval()：
setTimeout()可以传参（IE9+），参数加在时间后面（如：setTimeout(AA,2000,arg1,arg2)）
setTimeout(func,0)时间为0的setTimeout是尽快执行函数，不是立即执行函数，是空闲立即执行函数（其中的时间0可以省略）
setInterval(func,1000)  会延时1s再每秒循环执行函数func
setInterval(func(),1000)  会立即执行函数func且只执行一次
setInterval(func(),1000)且func(){return func}  即函数func里return了自己，会立即执行函数func一次并再每秒循环执行函数func
setTimeout()和setInterval()的第一个参尽量用函数func，不用字符串code

73.AJAX：
XMLHttpRequest  Ajax的核心对象，用于发送http请求
xhr.onreadystatechange(){if(xhr.readyState===4&&xhr.status===200)···}
xhr.open('get',URL);xhr.send();   Ajax的get原理性写法
xhr.open('post',URL);xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');xhr.send(data);   Ajax的post原理性写法
jQuery中，用封装好的$.getJSON()来请求获取JSON数据（
如：$.getJSON(URL,function(res){···});）
$.ajax()  jq的ajax通用方法，常用于其他方法不能完成的请求，语法$.ajax({name:value, name:value, ... })
用$.ajax()来请求GET数据：  $.ajax({url:'xxx',method:'get',success:function(res){...}});
用$.ajax()来请求POST数据： $.ajax(url:'xxx',method:'post',data:情况而定,success:function(){...});
用$.ajax()来请求PUT数据：  $.ajax(url:'xxx',method:'put',同上);
用$.ajax()来请求DELETE数据：  $.ajax(url:'xxx',method:'delete',同上);
encodeURIComponent(string)  编码函数，把字符串string作为URI组件进行编码
encodeURI(string)           编码函数，把字符串string作为URI进行编码
区别——encodeURIComponent一般处理URI的一部分···（跟特么没说一样），对保留字符也做编码处理，encodeURI有保留字符
decodeURIComponent()和decodeURII()为解码函数
jQuery的.data()方法，向元素附加或获取临时数据，data(name,value),data(name)（
如：$('div').data('a','bb')，再$('div').data('a')得到'bb'）
<<<const OCTOCATS = JSON.parse(fs.readFileSync('./octocats.json').toString());...res.send(OCTOCATS)...>>>

74.jQuery：
.prev() 前一个元素  .next() 
.parent() 父元素  .children()
.closest('xxx')  最近的符合条件的祖先元素
.append()  在元素末尾追加内容   .prepend()
.after()  在元素后面追加内容   .before()
.eq(number) 第几个选择器，从0开始   
.remove()  删除元素
.addClass()  .removeClass()  .toggleClass()
jQ的事件委托： $(父元素).on('click','指定子元素',function(){...});
jQ的动画：  $().animate({属性：‘属性值’,属性：‘属性值’},{duration:timeNumber});

75.Promise：
let pro = new Promis();

